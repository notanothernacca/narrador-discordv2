import discord
from discord import app_commands
from discord.ext import commands
import logging
from models.stats import Database

logger = logging.getLogger(__name__)

class CommandsCog(commands.Cog):
    def __init__(self, bot):
        self.bot = bot
        self.db = Database()
        
    @app_commands.command(name="narrar", description="Narra un texto en ingl√©s")
    async def narrate(self, interaction: discord.Interaction, texto: str):
        """Narrar texto directamente en ingl√©s"""
        try:
            await interaction.response.defer()
            
            # Narrar el texto
            await self.bot.narrate_english(
                texto, 
                interaction.user,
                str(interaction.channel_id)
            )
            
            await interaction.followup.send("‚úÖ Texto agregado a la cola de narraci√≥n")
            
        except Exception as e:
            logger.error(f"Error en comando narrar: {str(e)}")
            await interaction.followup.send("‚ùå Error al procesar la narraci√≥n")
            
    @app_commands.command(name="status", description="Muestra el estado del bot")
    async def status(self, interaction: discord.Interaction):
        """Mostrar estado actual del bot"""
        try:
            await interaction.response.defer()
            
            # Obtener estad√≠sticas
            queue_size = len(self.bot.queue_manager.queue)
            voice_connected = bool(interaction.guild.voice_client)
            
            embed = discord.Embed(
                title="Estado del Bot",
                color=discord.Color.blue()
            )
            
            embed.add_field(
                name="Estado de Conexi√≥n",
                value="üü¢ Conectado" if voice_connected else "üî¥ Desconectado",
                inline=False
            )
            
            embed.add_field(
                name="Cola de Audio",
                value=f"üìù {queue_size} elementos en cola",
                inline=False
            )
            
            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error en comando status: {str(e)}")
            await interaction.followup.send("‚ùå Error al obtener el estado")
            
    @app_commands.command(name="stats", description="Muestra estad√≠sticas de uso")
    async def stats(self, interaction: discord.Interaction):
        """Mostrar estad√≠sticas de uso"""
        try:
            await interaction.response.defer()
            
            # Obtener estad√≠sticas del canal
            channel_stats = self.db.get_channel_stats(str(interaction.channel_id))
            
            embed = discord.Embed(
                title="Estad√≠sticas de Uso",
                color=discord.Color.blue()
            )
            
            embed.add_field(
                name="Traducciones",
                value=f"üìä {channel_stats['translation_count']} traducciones realizadas",
                inline=False
            )
            
            embed.add_field(
                name="Narraciones",
                value=f"üéôÔ∏è {channel_stats['tts_count']} narraciones generadas",
                inline=False
            )
            
            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error en comando stats: {str(e)}")
            await interaction.followup.send("‚ùå Error al obtener estad√≠sticas")
            
    @app_commands.command(name="limpiar", description="Limpia la cola de reproducci√≥n")
    async def clear(self, interaction: discord.Interaction):
        """Limpiar cola de reproducci√≥n"""
        try:
            await interaction.response.defer()
            
            # Limpiar cola
            self.bot.queue_manager.clear_queue()
            
            await interaction.followup.send("üßπ Cola de reproducci√≥n limpiada")
            
        except Exception as e:
            logger.error(f"Error en comando limpiar: {str(e)}")
            await interaction.followup.send("‚ùå Error al limpiar la cola")
            
    @app_commands.command(name="salir", description="Desconecta el bot del canal de voz")
    async def leave(self, interaction: discord.Interaction):
        """Desconectar del canal de voz"""
        try:
            await interaction.response.defer()
            
            if interaction.guild.voice_client:
                await interaction.guild.voice_client.disconnect()
                await interaction.followup.send("üëã Desconectado del canal de voz")
            else:
                await interaction.followup.send("‚ùå No estoy conectado a ning√∫n canal de voz")
                
        except Exception as e:
            logger.error(f"Error en comando salir: {str(e)}")
            await interaction.followup.send("‚ùå Error al desconectar")

    @app_commands.command(name="metrics", description="Muestra m√©tricas del bot")
    @app_commands.describe(tipo="Tipo de m√©tricas a mostrar")
    @app_commands.choices(tipo=[
        app_commands.Choice(name="general", value="general"),
        app_commands.Choice(name="voz", value="voice"),
        app_commands.Choice(name="audio", value="audio")
    ])
    async def metrics(self, interaction: discord.Interaction, tipo: str = "general"):
        """Mostrar m√©tricas del bot"""
        try:
            await interaction.response.defer()
            logger.info(f"Comando metrics ejecutado con tipo: {tipo}")
            
            # Obtener estad√≠sticas
            stats = self.bot.metrics_manager.get_guild_stats(interaction.guild_id)
            
            embed = discord.Embed(
                title="üìä M√©tricas del Bot",
                color=discord.Color.blue()
            )

            if tipo == "general":
                # M√©tricas generales
                embed.add_field(
                    name="üéôÔ∏è Conexiones de Voz",
                    value=f"Total: {stats['voice']['total_connections']}\n"
                          f"Tasa de √©xito: {stats['voice']['connection_success_rate']:.1f}%",
                    inline=False
                )
                embed.add_field(
                    name="üîä Audio",
                    value=f"Total reproducidos: {stats['audio']['total_played']}\n"
                          f"Tasa de √©xito: {stats['audio']['success_rate']:.1f}%",
                    inline=False
                )
                embed.add_field(
                    name="‚è±Ô∏è Tiempos",
                    value=f"Tiempo total de audio: {stats['audio']['total_duration']}\n"
                          f"Tiempo promedio en cola: {stats['audio']['average_queue_time']}",
                    inline=False
                )

            elif tipo == "voice":
                # M√©tricas de voz
                embed.add_field(
                    name="üìä Conexiones",
                    value=f"Total intentos: {stats['voice']['total_connections']}\n"
                          f"Conexiones fallidas: {stats['voice']['failed_connections']}\n"
                          f"Tasa de √©xito: {stats['voice']['connection_success_rate']:.1f}%",
                    inline=False
                )
                embed.add_field(
                    name="üîå Desconexiones",
                    value=f"Total: {stats['voice']['total_disconnections']}\n"
                          f"Inesperadas: {stats['voice']['unexpected_disconnections']}\n"
                          f"Tasa de desconexiones inesperadas: {stats['voice']['unexpected_disconnection_rate']:.1f}%",
                    inline=False
                )
                embed.add_field(
                    name="‚è±Ô∏è Tiempo Total",
                    value=f"Tiempo en canales: {stats['voice']['total_audio_time']}",
                    inline=False
                )

            else:  # audio
                # M√©tricas de audio
                embed.add_field(
                    name="üìä Reproducciones",
                    value=f"Total en cola: {stats['audio']['total_queued']}\n"
                          f"Reproducidos: {stats['audio']['total_played']}\n"
                          f"Fallidos: {stats['audio']['failed_playbacks']}",
                    inline=False
                )
                embed.add_field(
                    name="‚è±Ô∏è Tiempos",
                    value=f"Duraci√≥n total: {stats['audio']['total_duration']}\n"
                          f"Tiempo promedio en cola: {stats['audio']['average_queue_time']}",
                    inline=False
                )
                embed.add_field(
                    name="üìà Rendimiento",
                    value=f"Tasa de √©xito: {stats['audio']['success_rate']:.1f}%",
                    inline=False
                )

            await interaction.followup.send(embed=embed)
            
        except Exception as e:
            logger.error(f"Error en comando metrics: {str(e)}")
            await interaction.followup.send("‚ùå Error al obtener m√©tricas")

async def setup(bot):
    await bot.add_cog(CommandsCog(bot)) 